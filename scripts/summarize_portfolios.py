#!/usr/bin/env python3
"""
Produce a compact summary table (route, total CO2) from one or more batch
result JSON files generated by steel_batch_cli.
"""

from __future__ import annotations

import argparse
import json
import re
from pathlib import Path
from typing import Dict, List, Optional


def _infer_route(entry: Dict[str, object], source: Path) -> str:
    route = entry.get("route_preset")
    if isinstance(route, str) and route.strip():
        return route.strip()
    match = re.search(r"finished_portfolio_(.+?)\.json$", source.name)
    if match:
        return match.group(1)
    return "unknown"


def summarize(files: List[Path]) -> List[Dict[str, object]]:
    rows: List[Dict[str, object]] = []
    for path in files:
        data = json.loads(path.read_text(encoding="utf-8"))
        if isinstance(data, dict):
            entries = [data]
        else:
            entries = list(data)
        portfolio_entry: Optional[Dict[str, object]] = None
        for entry in entries:
            if not isinstance(entry, dict):
                continue
            if entry.get("blend") or entry.get("name") == "finished_portfolio":
                portfolio_entry = entry
                break
        if portfolio_entry is None:
            continue
        route = _infer_route(portfolio_entry, path)
        rows.append({
            "route": route,
            "total_co2e_kg": portfolio_entry.get("total_co2e_kg"),
            "raw_co2e_kg": portfolio_entry.get("raw_co2e_kg"),
            "source": str(path),
        })
    return rows


def main() -> int:
    parser = argparse.ArgumentParser(description="Summarize finished portfolio totals by route.")
    parser.add_argument("files", nargs="+", type=Path, help="Result JSON files from steel_batch_cli.")
    parser.add_argument("--output", "-o", type=Path, default=Path("results/summary.json"), help="Output JSON path (default: results/summary.json).")
    args = parser.parse_args()

    rows = summarize(args.files)
    args.output.parent.mkdir(parents=True, exist_ok=True)
    args.output.write_text(json.dumps(rows, indent=2), encoding="utf-8")
    print(f"Wrote {len(rows)} rows to {args.output}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
